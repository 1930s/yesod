language: haskell

install:
    - cabal update
    - cabal install --force-reinstalls hspec cabal-meta cabal-src alex
    - cabal-meta install --force-reinstalls

script:
    - echo Done
    - cabal-meta install --enable-tests
    - mega-sdist --test
    - cabal install hspec cabal-meta cabal-src
    - cabal-meta install --force-reinstalls

# NB: don't set `language: haskell` here

# The following enables several GHC versions to be tested; often it's enough to test only against the last release in a major GHC version. Feel free to omit lines listings versions you don't need/want testing for.
env:
 - CABALVER=1.20 GHCVER=7.6.3
 - CABALVER=1.20 GHCVER=7.8.4
 #- CABALVER=1.22 GHCVER=7.10.1
 #- CABALVER=head GHCVER=head   # see section about GHC HEAD snapshots

# Note: the distinction between `before_install` and `install` is not important.
before_install:
 - travis_retry sudo add-apt-repository -y ppa:hvr/ghc
 - travis_retry sudo apt-get update
 - travis_retry sudo apt-get install cabal-install-$CABALVER ghc-$GHCVER # see note about happy/alex
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH

install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - travis_retry cabal update
 - cabal install cabal-meta alex happy

# Here starts the actual work to be performed for the package under test; any command which exits with a non-zero exit code causes the build to fail.
script:
 - cabal-meta install --only-dependencies --run-tests --enable-benchmarks --force-reinstalls

# The following scriptlet checks that the resulting source distribution can be built & installed
 - export SRC_TGZ=$(cabal info . | awk '{print $2 ".tar.gz";exit}') ;
   cd dist/;
   if [ -f "$SRC_TGZ" ]; then
      cabal install --force-reinstalls "$SRC_TGZ";
   else
      echo "expected '$SRC_TGZ' not found";
      exit 1;
   fi
